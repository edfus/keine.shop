# update:
#		DOMAIN, REDIR_HOST, AUTH_HOST
# env:
#		LOG_PATH, ROOT

{UPDATE-domain} {
	root * {env.ROOT}
	encode gzip

	route {
		redir /d /d/
		redir /static /static/
		rewrite /favicon.ico /static/favicon.webp
		rewrite /sw.js /static/yay/sw.js

		@not_file_servers {
			not path /d/*
			not path /static/*
		}

		route @not_file_servers {
			@root_not_empty_query {
				path_regexp ^\/[^/]*$
				expression {uri}.contains('?')
				method GET HEAD
			}

			reverse_proxy @root_not_empty_query {UPDATE-redir_host} {
				header_up Host {http.request.host}
				header_up X-Forwarded-For {http.request.remote}
				header_up X-Forwarded-Port {http.request.port}
				header_up X-Forwarded-Proto {http.request.scheme}
			}

			@empty_query {
				query ""
			}

			# left
			rewrite @empty_query /static/{path}
		}

		# left
		route {
			file_server /static/* {
				hide .*
			}

			@auth {
				method GET HEAD POST
				path /d/*
			}

			reverse_proxy @auth {UPDATE-auth_host} {
				header_up Host {http.request.host}
				header_up X-Forwarded-For {http.request.remote}
				header_up X-Forwarded-Port {http.request.port}
				header_up X-Forwarded-Proto {http.request.scheme}
			}
		}
	}

	log {
		output file {env.LOG_PATH}
		format filter {
			wrap json
			fields {
				request>headers>Authorization delete

				common_log delete -- delete ip address
				request>remote_addr ip_mask {
					ipv4 24
					ipv6 32
				}
			}
		}
	}
}

127.0.0.1 {
	@node {
		host 127.0.0.1
		protocol http
		path /
	}

	rewrite @node http://{UPDATE-domain}/
}

handle_errors {
	respond "{http.error.status_code} {http.error.status_text}"
}

# Refer to the Caddy docs for more information:
# https://caddyserver.com/docs/caddyfile
